{"version":3,"sources":["types/Filter.ts","helper/filterLinks.tsx","components/Footer/Footer.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/Notification/Notification.tsx","components/Header/Header.tsx","utils/fetchClient.ts","types/ErrorNotice.ts","api/todos.ts","helper/getVisibleTodos.tsx","App.tsx","index.tsx"],"names":["Filter","filterLinks","title","ALL","url","ACTIVE","COMPLETED","Footer","React","memo","filter","onFilterChange","completedTodos","activeTodosCount","deleteCompleted","className","map","link","type","onClick","href","classNames","selected","disabled","length","TodoItem","todo","onDelete","isProcessing","updateTodo","onChangeTitle","id","completed","useState","isEdited","setEdit","tempTitle","setTempTitle","inputElement","useRef","hasChanges","useEffect","current","focus","saveChanges","trim","checked","onChange","event","target","onSubmit","preventDefault","ref","placeholder","value","onKeyUp","key","onBlur","onDoubleClick","TodoList","todos","creating","inProcessing","TransitionGroup","CSSTransition","timeout","includes","Notification","error","errorNotice","closeErrorNotice","hidden","Header","handleSubmit","createNewTitle","activeTodos","updateTodos","isDisableInput","active","request","delay","data","options","method","body","JSON","stringify","headers","Promise","resolve","setTimeout","then","fetch","response","ok","Error","json","ErrorNotice","client","deleteTodo","todoId","completeTodo","renameTodo","USER_ID","App","todosFromServer","setTodos","errorMessage","setMessageError","setFilter","setNewTitle","tempTodo","setTempTodo","setProcessingIDs","hasError","showError","message","loadingTodos","useCallback","a","LOADING","timeoutForErrorNotice","clearTimeout","TITLE","createTodo","userId","state","ADD","handleDelete","DELETE","handleDeleteCompleted","removeAllComleted","all","handleComplete","completingTodos","UPDATE","changeTitle","newTitle","visibleTodos","useMemo","getVisibleTodos","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.d1921881.chunk.js","sourcesContent":["export enum Filter {\n  ALL = 'All',\n  ACTIVE = 'Active',\n  COMPLETED = 'Completed',\n}\n","import { Filter } from '../types/Filter';\nimport { FilterLink } from '../types/FilterLink';\n\nexport const filterLinks: FilterLink[] = [\n  { title: Filter.ALL, url: '' },\n  { title: Filter.ACTIVE, url: 'active' },\n  { title: Filter.COMPLETED, url: 'completed' },\n];\n","import classNames from 'classnames';\nimport React from 'react';\nimport { filterLinks } from '../../helper/filterLinks';\nimport { Filter } from '../../types/Filter';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  filter: Filter,\n  onFilterChange: (filter: Filter) => void,\n  completedTodos: Todo[],\n  activeTodosCount: number,\n  deleteCompleted: (todos: Todo[]) => void,\n}\n\nexport const Footer: React.FC<Props> = React.memo(\n  ({\n    filter,\n    onFilterChange,\n    completedTodos,\n    activeTodosCount,\n    deleteCompleted,\n  }) => {\n    return (\n      <footer className=\"todoapp__footer\">\n        <span className=\"todo-count\">\n          {`${activeTodosCount} items left`}\n        </span>\n\n        <nav className=\"filter\">\n          {filterLinks.map(link => (\n            <button\n              className=\"todoapp__footer__button\"\n              type=\"button\"\n              key={link.title}\n              onClick={() => onFilterChange(link.title)}\n            >\n              <a\n                href={`#/${link.url}`}\n                className={classNames(\n                  'filter__link',\n                  { selected: filter === link.title },\n                )}\n              >\n                {link.title}\n              </a>\n            </button>\n          ))}\n        </nav>\n\n        <button\n          type=\"button\"\n          className=\"todoapp__clear-completed\"\n          disabled={!completedTodos.length}\n          onClick={() => deleteCompleted(completedTodos)}\n        >\n          Clear completed\n        </button>\n      </footer>\n    );\n  },\n);\n","import React, { useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo,\n  onDelete: (todoId: number) => void,\n  isProcessing: boolean,\n  updateTodo: (todoId: number[], data: boolean) => void,\n  onChangeTitle: (id: number, title: string) => void,\n}\n\nexport const TodoItem: React.FC<Props> = React.memo(\n  ({\n    todo,\n    onDelete,\n    isProcessing,\n    updateTodo,\n    onChangeTitle,\n  }) => {\n    const { title, id, completed } = todo;\n\n    const [isEdited, setEdit] = useState(false);\n    const [tempTitle, setTempTitle] = useState(title);\n    const inputElement = useRef<HTMLInputElement>(null);\n    const hasChanges = tempTitle !== title;\n\n    useEffect(() => {\n      if (inputElement.current) {\n        inputElement.current.focus();\n      }\n    }, [isEdited]);\n\n    const saveChanges = () => {\n      setEdit(false);\n      if (hasChanges) {\n        if (!tempTitle.trim()) {\n          onDelete(id);\n\n          return;\n        }\n\n        onChangeTitle(id, tempTitle);\n      }\n    };\n\n    const cancelChanges = (event: React.KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        setEdit(false);\n      }\n    };\n\n    return (\n      <div\n        key={id}\n        className={classNames(\n          'todo',\n          { completed },\n        )}\n      >\n        <label className=\"todo__status-label\">\n          <input\n            type=\"checkbox\"\n            className=\"todo__status\"\n            checked={completed}\n            onChange={(event) => updateTodo([id], event.target.checked)}\n          />\n        </label>\n        {isEdited ? (\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              saveChanges();\n            }}\n          >\n            <input\n              ref={inputElement}\n              type=\"text\"\n              className=\"todo__title-field\"\n              placeholder=\"Empty todo will be deleted\"\n              value={tempTitle}\n              onKeyUp={cancelChanges}\n              onBlur={saveChanges}\n              onChange={({ target }) => setTempTitle(target.value)}\n            />\n          </form>\n        )\n          : (\n            <>\n              <span\n                className=\"todo__title\"\n                onDoubleClick={() => setEdit(true)}\n              >\n                {title}\n              </span>\n              <button\n                type=\"button\"\n                className=\"todo__remove\"\n                onClick={() => onDelete(id)}\n              >\n                ×\n              </button>\n\n            </>\n          )}\n\n        <div\n          className={classNames(\n            'modal overlay',\n            { 'is-active': isProcessing },\n          )}\n        >\n          <div className=\"modal-background has-background-white-ter\" />\n          <div className=\"loader\" />\n        </div>\n      </div>\n    );\n  },\n);\n","import React from 'react';\nimport {\n  CSSTransition,\n  TransitionGroup,\n} from 'react-transition-group';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem';\n\ninterface Props {\n  todos: Todo[],\n  creating: Todo | null,\n  onDelete: (todoId: number) => void,\n  inProcessing: number[],\n  updateTodo: (todoId: number [], data: boolean) => void,\n  onChangeTitle: (id: number, title: string) => void,\n}\n\nexport const TodoList: React.FC<Props> = React.memo(\n  ({\n    todos,\n    creating,\n    onDelete,\n    inProcessing,\n    updateTodo,\n    onChangeTitle,\n  }) => {\n    return (\n      <section className=\"todoapp__main\" data-cy=\"TodoList\">\n        <TransitionGroup>\n          {todos.map(todo => {\n            return (\n              <CSSTransition\n                key={todo.id}\n                timeout={300}\n                classNames=\"item\"\n              >\n                <TodoItem\n                  todo={todo}\n                  onDelete={onDelete}\n                  isProcessing={inProcessing.includes(todo.id)}\n                  updateTodo={updateTodo}\n                  onChangeTitle={onChangeTitle}\n                />\n              </CSSTransition>\n            );\n          })}\n\n          {creating && (\n            <CSSTransition\n              key={0}\n              timeout={300}\n              classNames=\"temp-item\"\n            >\n              <TodoItem\n                todo={creating}\n                onDelete={onDelete}\n                updateTodo={updateTodo}\n                isProcessing\n                onChangeTitle={onChangeTitle}\n              />\n            </CSSTransition>\n          )}\n        </TransitionGroup>\n      </section>\n    );\n  },\n);\n","import classNames from 'classnames';\nimport React from 'react';\n\ninterface Props {\n  error: boolean,\n  errorNotice: string,\n  closeErrorNotice: (state: string) => void,\n}\n\nexport const Notification: React.FC<Props> = React.memo(\n  ({\n    error,\n    errorNotice,\n    closeErrorNotice,\n  }) => {\n    return (\n      <div\n        className={classNames(\n          'notification is-danger is-light has-text-weight-normal',\n          { hidden: !error },\n        )}\n      >\n        <button\n          aria-label=\"btn\"\n          type=\"button\"\n          className=\"delete\"\n          onClick={() => closeErrorNotice('')}\n        />\n\n        {errorNotice}\n      </div>\n    );\n  },\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  title: string,\n  handleSubmit: (event: React.FormEvent<HTMLFormElement>) => void,\n  createNewTitle: (title: string) => void,\n  completedTodos: Todo[],\n  activeTodos: Todo[],\n  updateTodos: (todoId: number[], data: boolean) => void,\n  isDisableInput: boolean,\n}\n\nexport const Header: React.FC<Props> = React.memo(\n  ({\n    title,\n    handleSubmit,\n    createNewTitle,\n    completedTodos,\n    activeTodos,\n    updateTodos,\n    isDisableInput,\n  }) => {\n    return (\n      <header className=\"todoapp__header\">\n        <button\n          aria-label=\"Toggle All Todos\"\n          type=\"button\"\n          className={classNames(\n            'todoapp__toggle-all',\n            { active: !activeTodos.length },\n          )}\n          onClick={() => {\n            if (!activeTodos.length) {\n              updateTodos(completedTodos.map(todo => todo.id), false);\n            } else {\n              updateTodos(activeTodos.map(todo => todo.id), true);\n            }\n          }}\n        />\n\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            className=\"todoapp__new-todo\"\n            placeholder=\"What needs to be done?\"\n            disabled={isDisableInput}\n            value={title}\n            onChange={({ target }) => createNewTitle(target.value)}\n          />\n        </form>\n      </header>\n    );\n  },\n);\n","import { Data } from '../types/Data';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data?: Data,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: Data) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: Data) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum ErrorNotice {\n  LOADING = 'Unable loading data',\n  ADD = 'Unable to add a todo',\n  DELETE = 'Unable to delete a todo',\n  UPDATE = 'Unable to update a todo',\n  TITLE = 'Title can\\'t be empty',\n}\n","import { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const addTodo = (data: Todo) => {\n  return client.post('/todos', data);\n};\n\nexport const deleteTodo = (todoId: number) => {\n  return client.delete(`/todos/${todoId}`);\n};\n\nexport const completeTodo = (todoId: number, data: boolean) => {\n  return client.patch(`/todos/${todoId}`, { completed: data });\n};\n\nexport const renameTodo = (todoId: number, title: string) => {\n  return client.patch(`/todos/${todoId}`, { title });\n};\n","import { Filter } from '../types/Filter';\nimport { Todo } from '../types/Todo';\n\nexport const getVisibleTodos = (todos: Todo[], filter: Filter) => {\n  switch (filter) {\n    case Filter.ACTIVE:\n      return todos.filter(todo => !todo.completed);\n\n    case Filter.COMPLETED:\n      return todos.filter(todo => todo.completed);\n\n    default:\n      return todos;\n  }\n};\n","import React, {\n  useCallback, useEffect, useMemo, useState,\n} from 'react';\nimport { Footer } from './components/Footer';\nimport { TodoList } from './components/TodoList';\nimport { Notification } from './components/Notification';\nimport { Header } from './components/Header';\nimport { UserWarning } from './UserWarning';\nimport {\n  addTodo, completeTodo, deleteTodo, getTodos, renameTodo,\n} from './api/todos';\nimport { Todo } from './types/Todo';\nimport { ErrorNotice } from './types/ErrorNotice';\nimport { Filter } from './types/Filter';\nimport { getVisibleTodos } from './helper/getVisibleTodos';\n\nconst USER_ID = 6762;\n\nexport const App: React.FC = () => {\n  const [todosFromServer, setTodos] = useState<Todo[]>([]);\n  const [errorMessage, setMessageError] = useState('');\n  const [filter, setFilter] = useState(Filter.ALL);\n  const [title, setNewTitle] = useState('');\n  const [tempTodo, setTempTodo] = useState<Todo | null>(null);\n  const [inProcessing, setProcessingIDs] = useState<number[]>([]);\n  const hasError = !!errorMessage;\n  const isDisableInput = tempTodo !== null;\n\n  const showError = (message: string) => {\n    setMessageError(message);\n  };\n\n  const loadingTodos = useCallback(async () => {\n    try {\n      const todos = await getTodos(USER_ID);\n\n      setTodos(todos);\n    } catch (error) {\n      showError(ErrorNotice.LOADING);\n    }\n  }, [USER_ID]);\n\n  useEffect(() => {\n    const timeoutForErrorNotice = setTimeout(() => setMessageError(''), 3000);\n\n    return () => {\n      clearTimeout(timeoutForErrorNotice);\n    };\n  }, [errorMessage]);\n\n  useEffect(() => {\n    loadingTodos();\n  }, []);\n\n  const handleSubmit = useCallback(\n    async (event: React.FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n\n      if (!title.trim()) {\n        showError(ErrorNotice.TITLE);\n\n        return;\n      }\n\n      const createTodo = {\n        id: 0,\n        userId: USER_ID,\n        title,\n        completed: false,\n      };\n\n      setTempTodo(createTodo);\n\n      try {\n        await addTodo(createTodo);\n        setTodos(state => [...state, createTodo]);\n\n        setNewTitle('');\n        setTempTodo(null);\n        loadingTodos();\n      } catch (error) {\n        showError(ErrorNotice.ADD);\n        setTempTodo(null);\n      }\n    }, [title],\n  );\n\n  const handleDelete = useCallback(async (todoId: number) => {\n    try {\n      setProcessingIDs([todoId]);\n      await deleteTodo(todoId);\n      loadingTodos();\n    } catch (error) {\n      showError(ErrorNotice.DELETE);\n    } finally {\n      setProcessingIDs([]);\n    }\n  }, [loadingTodos]);\n\n  const handleDeleteCompleted = useCallback(\n    async (todos: Todo[]) => {\n      try {\n        setProcessingIDs(todos.map(todo => todo.id));\n        const removeAllComleted = todos.map(todo => (\n          deleteTodo(todo.id)\n        ));\n\n        await Promise.all(removeAllComleted);\n\n        loadingTodos();\n      } catch (error) {\n        showError(ErrorNotice.DELETE);\n      } finally {\n        setProcessingIDs([]);\n      }\n    }, [inProcessing],\n  );\n\n  const handleComplete = useCallback(\n    async (todoId: number[], data: boolean) => {\n      setProcessingIDs(todoId);\n\n      try {\n        const completingTodos = todoId.map(id => (\n          completeTodo(id, data)\n        ));\n\n        await Promise.all(completingTodos);\n\n        loadingTodos();\n      } catch (error) {\n        showError(ErrorNotice.UPDATE);\n      } finally {\n        setProcessingIDs([]);\n      }\n    }, [],\n  );\n\n  const changeTitle = useCallback(async (id: number, newTitle: string) => {\n    setProcessingIDs([id]);\n\n    try {\n      await renameTodo(id, newTitle);\n      loadingTodos();\n    } catch (error) {\n      setMessageError(ErrorNotice.UPDATE);\n    } finally {\n      setProcessingIDs([]);\n    }\n  }, []);\n\n  const visibleTodos = useMemo(() => (\n    getVisibleTodos(todosFromServer, filter)\n  ), [todosFromServer, filter]);\n\n  const completedTodos = useMemo(\n    () => todosFromServer.filter(todo => (todo.completed)),\n    [todosFromServer, tempTodo],\n  );\n\n  const activeTodos = useMemo(\n    () => todosFromServer.filter(todo => !todo.completed),\n    [todosFromServer],\n  );\n\n  if (!USER_ID) {\n    return <UserWarning />;\n  }\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__content\">\n        <Header\n          isDisableInput={isDisableInput}\n          title={title}\n          handleSubmit={handleSubmit}\n          createNewTitle={setNewTitle}\n          completedTodos={completedTodos}\n          activeTodos={activeTodos}\n          updateTodos={handleComplete}\n        />\n\n        <TodoList\n          todos={visibleTodos}\n          creating={tempTodo}\n          onDelete={handleDelete}\n          inProcessing={inProcessing}\n          updateTodo={handleComplete}\n          onChangeTitle={changeTitle}\n        />\n\n        {todosFromServer.length > 0 && (\n          <Footer\n            filter={filter}\n            onFilterChange={setFilter}\n            completedTodos={completedTodos}\n            activeTodosCount={activeTodos.length}\n            deleteCompleted={handleDeleteCompleted}\n          />\n        )}\n      </div>\n      <Notification\n        error={hasError}\n        errorNotice={errorMessage}\n        closeErrorNotice={setMessageError}\n      />\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<App />);\n"],"sourceRoot":""}